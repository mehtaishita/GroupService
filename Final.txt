You will take your GroupService with multicasting implementation from Homework 5 and improve it by making it fully-distributed across multiple machines/JVMs and adding most of the following features:
Refactor the code to use Akka Cluster 
Provide some type of reasonable message ordering guarantees 
Implement well defined group membership (i.e., joining and leaving) protocols so actors do not receive messages meant for groups they are no longer in.

Do actors ever receive messages originating from a given actor out of order? What if the messages are forwarded through an intermediary?
What if two actors multicast to the same group? Does each member receive the messages in the same order?
Do actors ever receive messages for groups "late", after having left the group?
How does your choice of weights and parameters affect the amount of message traffic?
How can you be sure your code is working, i.e., the right actors are receiving the right messages?


1. Your code.
   2. A file (or files) containing sample output generated by running your program. Readable screenshots with short explanations are great. 
   3. A separate document describing 1) how to run the project, 2) the overall system design, 3) the benefits of various design decisions you have made as well as the tradeoffs, and 4) the synchronization, replication, and fault tolerance aspects---if applicable---of your app.
   4. The directories containing all the executable files and other test directories you used to test your code (so I can easily reproduce your executions)